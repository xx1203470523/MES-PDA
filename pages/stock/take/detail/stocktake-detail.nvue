<template>
	<view class="take-detail" :style="{height: pageHeight}">
		<uni-search-bar ref="searchRef" v-model="page.info.materialCode" placeholder="条码输入或扫描" cancel-text="重置" @confirm="reloadList"
		after-confirm-and-focus focus @cancel="cancelAndReloadList"></uni-search-bar>
		<view class="p-2">
			<text class="text-sub-lg">单据编号：{{ page.info.code }}</text> 
		</view>
		<uni-card class="take-detail-statistics" margin="20rpx 20rpx" background-color="#5C8DFC">
			<view class="flex-row flex-align-center flex-justify-between">
				<view class="flex-1 flex flex-align-center p-1">
					<view>
						<text class="text-obvious text-white">{{ page.info.takeTotal }}</text>
					</view>
					<view class="mt-1">
						<text class="text-sub text-white">盘点总数</text>
					</view>
				</view>
				<view class="flex-1 flex flex-align-center p-1">
					<view>
						<text class="text-obvious text-white">{{ page.info.bookTotal }}</text>
					</view>
					<view class="mt-1">
						<text class="text-sub text-white">库存总数</text>
					</view>
				</view>
			</view>
		</uni-card>

		<z-tabs ref="tabs" bgColor="transparent" :list="page.tab.items" :current="page.tab.current"
			@change="tabsChange"></z-tabs>

		<uni-card class="flex-1">

			<view class="flex-row flex-justify-between">
				<view class="flex-1 flex-row flex-align-center">
					<uni-icons type="scan"></uni-icons>
					<text class="ml-1 text-sub-lg">物料编码</text>
				</view>
				<view class="flex-1 flex-row flex-justify-end">
					<text class="text-sub-lg">盘点数/账面数</text>
				</view>
			</view>

			<swiper class="flex-1" :current="page.tab.current" @change="swiperChange" @transition="swiperTransition"
				@animationfinish="swiperAnimationfinish">
				<swiper-item class="mt-2" v-for="(item, index) in page.tab.items" :key="index">
					<stocktake-detail-list ref="paging" :id="page.info.id" :materialCode="page.info.materialCode"
						:searchTypeEnum="index" :currentSearchTypeEnum="page.tab.current">
					</stocktake-detail-list>
				</swiper-item>
			</swiper>
		</uni-card>
	</view>
</template>

<script lang="ts" name="stocktake-detail" setup>
	import { ref, reactive, unref, computed } from 'vue'
	import { onLoad, onUnload } from '@dcloudio/uni-app'
	import { init } from './stocktake-detail-core'
	import stocktakeDetailList from './components/stocktake-detail-list.nvue'
	import type { PdaListItem } from '@/components/pda/pda-list/pda-list-types'
	import type { TakeDetailData } from './stocktake-detail-types'
	
	const paging = ref(null)

	const tabs = ref(null)
	
	const searchRef = ref(null)

	const page = reactive<{
		windowInfo ?: UniNamespace.GetWindowInfoResult,
		setTimeout : Array<any>,
		tab : {
			current : number,
			items : Array<string>
		},
		info : {
			id : string,
			code : string,
			materialCode : string,
			takeTotal : number,
			bookTotal : number

		},
		list : {
			items : PdaListItem[],
			data : TakeDetailData[]
		}
	}>({
		setTimeout: [],
		tab: {
			current: 0,
			items: ['全部数', '差异数', '无差异数']
		},

		info: {
			id: '',
			code: '',
			materialCode: '',
			takeTotal: 0,
			bookTotal: 0
		},
		list: {
			items: [
				{
					label: '库位',
					field: 'binCode'
				},
				{
					label: '物料名称',
					field: 'material.materialName'
				},
				{
					label: '单位',
					field: 'material.materialUnit'
				}
			],
			data: []
		}
	});
	
	function searchFocus() {
		try {
			const _searchRef = unref(searchRef)
	
			if (_searchRef) {
				_searchRef.toFocus()
			}
		} catch (err) {
			console.log(err)
		}
	}

	function reloadList() {
		const _paging = unref(paging)
		if (_paging && Array.isArray(_paging)) {
			_paging.forEach(m => {
				m.reload()
			})
		}
	}

	function cancelAndReloadList() {
		searchFocus()
		setTimeout(() => {
			reloadList()
		}, 300)
	}

	function swiperTransition(e : any) {
		const _tabs = unref(tabs)
		_tabs.setDx(e.detail.dx)
	}

	function swiperAnimationfinish(e : any) {
		page.tab.current = e.detail.current

		const _tabs = unref(tabs)
		_tabs.unlockDx()
	}
	
	const { tabsChange, swiperChange, reloadDetailInfo, reloadDetailQuantitySumOngoing, unload } = init({ page })

	const pageHeight = computed(() => {
		let height = 0

		//#ifdef APP
		height = page.windowInfo.windowHeight
		// #endif

		// #ifndef APP
		height = page.windowInfo.windowHeight - 44
		// #endif

		return height + 'px'
	})

	onLoad(({ id, code }) => {
		page.info.id = id
		page.info.code = code
		page.windowInfo = uni.getWindowInfo()

		reloadDetailInfo()
		reloadDetailQuantitySumOngoing()
	})

	onUnload(() => {
		unload()
	})
</script>

<style lang="scss" scoped>
	.received-detail {
		display: flex;

		.received-detail-statistics {
			border-radius: 24rpx;
		}
	}
</style>