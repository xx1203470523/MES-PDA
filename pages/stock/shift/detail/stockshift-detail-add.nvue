<template>
	<view class="stockshift-detail" :style="{height: pageHeight}">
		<uni-forms ref="baseForm" :modelValue="page.input" label-position="left" :rules="page.rules"
			class="p-1 bg-white border-bottom">
			<uni-forms-item>
				<view class="flex-1">
					<radio-group class="flex-1 flex-row flex-justify-between">
						<view class="flex-1 flex-row flex-align-center flex-justify-center"
							v-for="(item, index) in page.shiftType">
							<radio :value="item.value" @click="shiftChange(item.value)" :checked="item.value=='1'" />
							<view>{{item.text}}</view>
						</view>
					</radio-group>
				</view>
			</uni-forms-item>
			<uni-forms-item label="移出" required name="fromBinCode" class="pb-2">
				<uni-easyinput ref="fromBinCodeInput" v-model="page.input.fromBinCode" placeholder="扫描或者输入"
					class="sub-input" @confirm="checkBin('from')" trim />
			</uni-forms-item>
			<uni-forms-item label="移入" required name="toBinCode" class="pb-2">
				<uni-easyinput ref="toBinCodeInput" v-model="page.input.toBinCode" placeholder="扫描或者输入"
					class="sub-input" @confirm="checkBin('to')" trim />
			</uni-forms-item>
			<uni-forms-item label="条码" required name="materialCode" v-if="page.ishow" class="pb-2">
				<view class="flex-1">
					<uni-easyinput ref="materialCodeInput" v-model="page.input.materialCode" trim placeholder="扫描或输入"
						@confirm="materialConfirm"></uni-easyinput>
				</view>
				<view class="ml-4 unit-item">
					<uni-easyinput :value="page.input.unit" disabled></uni-easyinput>
				</view>
			</uni-forms-item>
			<uni-forms-item class="flex-row flex-align-center flex-basis-auto pb-2" label="数量" required
				name="shiftQuantity" v-if="page.ishow">
				<uni-number-box ref="shiftQuantityInput" v-model="page.input.shiftQuantity"
					@confirm="quanTityConfirm"></uni-number-box>
				<basic-checkbox class="ml-2" label="确认数量" v-model="page.handle.needConfirmQuantity"></basic-checkbox>
			</uni-forms-item>
		</uni-forms>
		<uni-card v-if="page.ishow" class="received-main-statistics pb-2" background-color="#5C8DFC"
			margin="10rpx 10rpx">
			<view class="flex-row flex-align-center flex-justify-between">
				<view class="flex-1 flex flex-align-center p-1">
					<view>
						<text
							class="text-obvious text-white">{{page.totalNumber.scanQuanltity}}/{{page.totalNumber.stockQuanltity}}</text>
					</view>
					<view class="mt-1">
						<text class="text-sub text-white">扫描数/库存数</text>
					</view>
				</view>
				<view class="flex-1 flex flex-align-center p-1">
					<view>
						<text class="text-obvious text-white">{{page.totalNumber.totalScansQuanltity}}</text>
					</view>
					<view class="mt-1">
						<text class="text-sub text-white">总扫描数</text>
					</view>
				</view>
			</view>
		</uni-card>
		<uni-card class="flex-1 flex" v-if="page.ishow">
			<view class="flex-1 flex">
				<z-paging class="flex-1" ref="paging" :fixed="false" use-inner-list v-model="page.list.data"
					:refresher-enabled="false">
					<template #cell="{item, index}">
						<pda-item :key="index" :items="page.list.items" :data="item" :arrowRight="false">
						</pda-item>
					</template>
				</z-paging>
				<!-- <scroll-view class="stockshift-details-add-body__content" scroll-y>
					<view v-for="(item,index) in page.list.data" :key="index">
						<pda-item :key="index" :items="page.list.items" :data="item" :arrowRight="false">
						</pda-item>
					</view>
				</scroll-view> -->
			</view>
		</uni-card>

	</view>
</template>
<!-- 直接移位 -->
<script lang="ts" name="stockshift_detail_add" setup>
	import {
		onNavigationBarButtonTap,
		onLoad,
		onHide,
		onReady
	} from '@dcloudio/uni-app'

	import {
		init
	} from './stockshift-detail-add-core';

	import {
		getBinByQueryAsync,
		createDetailsAsync,
		getBinAndMaterialByQueryAsync,
		confirmShiftAsync,
		getScanQualtityApiAsync
	} from '@/api/modules/wms/stockshift/stockshift-detail'

	import { ref, unref, computed } from 'vue'

	import { startPlay } from '@/utils/voice-utils'

	import {  back } from '@/utils/route-utils'

	//const fromBinCode = ref(null)

	const {
		page,
		shiftChange
	} = init({ materialCodeInputFocus });

	const paging = ref(null)

	const materialCodeInput = ref(null)

	const shiftQuantityInput = ref(null)

	const fromBinCodeInput = ref(null)

	const toBinCodeInput = ref(null)

	const isCheck = ref(false)

	onLoad(({
		id,
		shiftCode,
		wareHouseId,
		shiftType,
		shiftTotal
	}) => {
		page.fromOperate.id = id

		page.fromOperate.shiftCode = shiftCode

		page.fromOperate.wareHouseId = wareHouseId

		page.fromOperate.shiftType = shiftType

		page.totalNumber.totalScansQuanltity = shiftTotal

		page.ishow = true

		page.input.shiftType = '1'

		//page.totalNumber.totalScansQuanltity=0

		//fromBinFocus()

		page.windowInfo = uni.getWindowInfo()

	})

	onReady(() => {
		fromBinFocus()
	})

	const pageHeight = computed(() => {
		let height = 0

		//#ifdef APP
		height = page.windowInfo.windowHeight
		// #endif

		// #ifndef APP
		height = page.windowInfo.windowHeight - 44
		// #endif

		return height + 'px'
	})

	onHide(() => {
		// #ifndef APP-PLUS
		uni.hideKeyboard()
		// #endif
		// #ifdef APP-PLUS
		plus.key.hideSoftKeybord()
		// #endif
	})

	onNavigationBarButtonTap((opt : any) => {

		if (opt.type == 'menu') {
			uni.showActionSheet({
				itemList: ['查看', '完成'],
				success: (res) => {
					if (res.tapIndex == 0) {
						uni.navigateTo({
							url: '/pages/stock/shift/details/stockshift-details?id=' + page.fromOperate
								.id + '&shiftCode=' + page.fromOperate.shiftCode
						})
					}

					if (res.tapIndex == 1) {

						uni.showLoading({
							title: '确认单据中...',
							mask: true
						})

						const param = [{
							id: page.fromOperate.id,
							shiftCode: page.fromOperate.shiftCode,
							wareHouseId: page.fromOperate.wareHouseId
						}]

						confirmShiftAsync(param).then(({ data }) => {
							uni.showToast({
								icon: 'success',
								title: '移位完成!'
							})
							const url = '/pages/stock/shift/main/stockshift-main'
							//to(url)
							uni.redirectTo({
								url,
								title: '移位完成!',
								success: () => {

									back({
										redirectUrl: '/pages/stock/shift/main/stockshift-main'
									})
								}
							});

						}).catch((error) => {
							// uni.showToast({
							// 	icon: 'error',
							// 	title: '移位失败!'
							// })
						})

						uni.hideLoading()
					}
				}
			})
		}

	})

	async function checkBin(type : string) {

		// page.isFous.isFromBinCodeFocus = false
		// page.isFous.isToBinCodeFocus = false
		// page.isFous.isMaterialFocus = false

		let locationCode = '';

		if (type == 'from') {
			locationCode = page.input.fromBinCode
		}
		else {
			locationCode = page.input.toBinCode
		}

		if (page.input.fromBinCode == page.input.toBinCode && page.input.toBinCode && page.input.fromBinCode) {
			uni.showToast({
				icon: 'error',
				title: '库位不能相同!'
			})
			startPlay('errorVoicePDA')
			if (type == 'from') {
				fromBinFocus()
			}
			if (type == 'to') {
				toBinFocus()
			}
			return
		}

		const param = {
			locationCode: locationCode,
			warehouseId: page.fromOperate.wareHouseId
		}

		if (param.locationCode && param.warehouseId) {

			try {
				const { locationCode } = await getBinByQueryAsync(param)

				if (locationCode) {
					if (type == 'from') {
						toBinFocus()
					}

					//移入库位时保存明细
					if (type == 'to') {
						//直接移位时直接保存明细
						if (page.input.shiftType == '2') {
							//try {
							const param = {
								fromBinCode: page.input.fromBinCode,
								toBinCode: page.input.toBinCode,
								shiftTypeEnum: 2,
								stockShiftId: page.fromOperate.id,
								warehouseId:page.fromOperate.wareHouseId
							}

							await createDetailsAsync(param)

							uni.showToast({
								icon: 'success',
								title: '整体移位成功!'
							})
							startPlay('successVoicePDA')
							// }
							// catch (error) {
							// 	uni.showToast({
							// 		icon: 'error',
							// 		title: '保存明细失败!'
							// 	})
							// 	startPlay('errorVoicePDA')
							// }
						}
						else {
							materialCodeFocus()
						}
					}
					startPlay('successVoicePDA')
				}
				else {
					uni.showToast({
						icon: 'error',
						title: '库位异常，请检查！'
					})
					startPlay('errorVoicePDA')
					if (type == 'from') {
						fromBinFocus()
					}
					if (type == 'to') {
						toBinFocus()
					}
				}

			}
			catch (err) {
				startPlay('errorVoicePDA')
				if (type == 'from') {
					fromBinFocus()
				}
				if (type == 'to') {
					toBinFocus()
				}
			}
		}
	}

	function materialCodeInputFocus(val : any) {

		isCheck.value = val

		const _materialCodeInput = unref(materialCodeInput)

		const _shiftQuantityInput = unref(shiftQuantityInput)

		if (_materialCodeInput && !val) {
			_materialCodeInput.toFocus()
		}

		if (_shiftQuantityInput && val) {
			_shiftQuantityInput.toFocus()
		}
	}

	/**
	* 数量回车事件
	*/
	async function quanTityConfirm() {
		await materialConfirm('quanTity')
		// if (page.handle.needConfirmQuantity) {
		// 	await materialConfirm('quanTity')
		// }
	}

	/**
	 * 物料回车事件
	 */
	async function materialConfirm(type : any) {

		if (!page.input.fromBinCode) {
			uni.showToast({
				icon: 'error',
				title: '移出库位为空!'
			})
			startPlay('errorVoicePDA')
			fromBinFocus()
			return
		}

		if (!page.input.toBinCode) {
			uni.showToast({
				icon: 'error',
				title: '移入库位为空!'
			})
			toBinFocus()
			startPlay('errorVoicePDA')
			return
		}

		if (!page.input.materialCode) {
			uni.showToast({
				icon: 'error',
				title: '物料编码为空!'
			})
			materialCodeFocus()
			startPlay('errorVoicePDA')
			return
		}

		if (page.input.fromBinCode == page.input.toBinCode) {
			uni.showToast({
				icon: 'error',
				title: '移出移入相同!'
			})
			materialCodeFocus()
			startPlay('errorVoicePDA')
			return
		}

		if (!page.input.shiftQuantity) {
			uni.showToast({
				icon: 'error',
				title: '数量为空!'
			})
			startPlay('errorVoicePDA')

			shiftQuantityFocus()
			//page.isFous.isMaterialFocus = true
			return
		}
		page.input.shiftQuantity = Number.parseInt(page.input.shiftQuantity + '')

		//确认数量时，回车物料执行逻辑
		if (page.handle.needConfirmQuantity && type != 'quanTity') {

			try {

				const param = {
					materialCode: page.input.materialCode,
					fromLocationCode: page.input.fromBinCode,
					toLocationCode: page.input.toBinCode,
					quantity: page.input.shiftQuantity,
					warehouseId: page.fromOperate.wareHouseId,
					id:page.fromOperate.id
				}

				const { fromWarehouseBin, material, toWarehouseBin, fromStockBin } = await getBinAndMaterialByQueryAsync(param)

				if (!fromWarehouseBin || !material || !toWarehouseBin || !fromStockBin) {
					uni.showToast({
						icon: 'error',
						title: '校验失败!'
					})

					startPlay('errorVoicePDA')

					return
				}

				const item = {
					materialCode: material.materialCode,
					materialName: material.materialName,
					materialUnit: material.materialUnit,
					shiftType: page.fromOperate.shiftType == '1' ? '直接移位' : '直接移位',
					shiftCode: page.fromOperate.shiftCode,
					fromBinCode: page.input.fromBinCode,
					toBinCode: page.input.toBinCode
				}

				if (page.list.data.length == 0) {
					page.list.data.push(item)
				}
				else {
					page.list.data.forEach((i) => {
						if (i.materialCode != item.materialCode || i.fromBinCode != item.fromBinCode || i.toBinCode != item.toBinCode) {
							page.list.data = []
							page.list.data.push(item)
							page.totalNumber.scanQuanltity = 0
						}
					})
				}

				paging.value.complete(page.list.data)

				const paramDetails = {
					id: page.fromOperate.id,
					materialCode: page.input.materialCode,
					fromBinCode: page.input.fromBinCode,
					stockShiftId: page.fromOperate.id,
					toBinCode: page.input.toBinCode
				}

				const { scanQuanltity, totalScanQuanltity } = await getScanQualtityApiAsync(paramDetails)

				page.totalNumber.scanQuanltity = scanQuanltity ?? 0

				page.totalNumber.stockQuanltity = fromStockBin.stockQuantity - fromStockBin.occupyQuantity

				page.totalNumber.totalScansQuanltity = totalScanQuanltity ?? 0

				page.input.unit = material.materialUnit

				startPlay('successVoicePDA')

				return
			}
			catch (err) {
				uni.showToast({
					icon: 'error',
					title: '校验失败!'
				})
				startPlay('errorVoicePDA')
			} finally {
				if (page.handle.needConfirmQuantity) {
					shiftQuantityFocus()
				}
				else {
					materialCodeFocus()
				}
			}
		}

		// if (page.handle.needConfirmQuantity) {
		// 	if (!page.input.shiftQuantity) {
		// 		uni.showToast({
		// 			icon: 'error',
		// 			title: '数量为空!'
		// 		})
		// 		startPlay('errorVoicePDA')
		// 		//page.isFous.isMaterialFocus = true
		// 		return
		// 	}
		// 	page.input.shiftQuantity = Number.parseInt(page.input.shiftQuantity + '')
		// }

		uni.showLoading({
			title: '物料扫描中...',
			mask: true
		})

		try {
			const param = {
				materialCode: page.input.materialCode,
				fromLocationCode: page.input.fromBinCode,
				toLocationCode: page.input.toBinCode,
				quantity: page.input.shiftQuantity,
				warehouseId: page.fromOperate.wareHouseId,
				id:page.fromOperate.id
			}

			const { fromWarehouseBin, material, toWarehouseBin, fromStockBin } = await getBinAndMaterialByQueryAsync(param)

			if (!fromWarehouseBin || !material || !toWarehouseBin || !fromStockBin) {
				uni.showToast({
					icon: 'error',
					title: '校验失败!'
				})
				startPlay('errorVoicePDA')
				return
			}

			//计算扫描数
			const paramDetails = {
				id: page.fromOperate.id,
				materialCode: page.input.materialCode,
				fromBinCode: page.input.fromBinCode,
				stockShiftId: page.fromOperate.id,
				toBinCode: page.input.toBinCode
			}

			const { scanQuanltity, totalScanQuanltity } = await getScanQualtityApiAsync(paramDetails)

			//console.log(scanQuanltity)
			//console.log(totalScanQuanltity)

			if ((scanQuanltity + page.input.shiftQuantity) > (fromStockBin.stockQuantity - fromStockBin.occupyQuantity)) {
				uni.showToast({
					icon: 'error',
					title: '扫描超出可用数!'
				})

				startPlay('errorVoicePDA')

				page.totalNumber.scanQuanltity = scanQuanltity

				page.totalNumber.stockQuanltity = fromStockBin.stockQuantity - fromStockBin.occupyQuantity

				page.totalNumber.totalScansQuanltity = totalScanQuanltity

				page.input.unit = material.materialUnit

				return
			}
			//创建明细
			const param_create = {
				fromBinCode: page.input.fromBinCode,
				toBinCode: page.input.toBinCode,
				shiftTypeEnum: 1,
				stockShiftId: page.fromOperate.id,
				materialCode: page.input.materialCode,
				shiftQuantity: page.input.shiftQuantity,
				warehouseId:page.fromOperate.wareHouseId
			}

			await createDetailsAsync(param_create)

			const item = {
				materialCode: material.materialCode,
				materialName: material.materialName,
				materialUnit: material.materialUnit,
				shiftType: page.fromOperate.shiftType == '1' ? '直接移位' : '直接移位',
				shiftCode: page.fromOperate.shiftCode,
				fromBinCode: page.input.fromBinCode,
				toBinCode: page.input.toBinCode
			}

			if (page.list.data.length == 0) {
				page.list.data.push(item)
			}
			else {
				page.list.data.forEach((i) => {
					if (i.materialCode != item.materialCode || i.fromBinCode != item.fromBinCode || i.toBinCode != item.toBinCode) {
						page.list.data = []
						page.list.data.push(item)
						page.totalNumber.scanQuanltity = 0
					}
				})
			}

			paging.value.complete(page.list.data)

			//扫描数
			page.totalNumber.scanQuanltity = scanQuanltity + page.input.shiftQuantity

			if (scanQuanltity == null) {
				page.list.data = []
			}

			//库存数
			page.totalNumber.stockQuanltity = fromStockBin.stockQuantity - fromStockBin.occupyQuantity

			//page.totalNumber.totalScansQuanltity = Number.parseInt(page.totalNumber.totalScansQuanltity + '') + page.input.shiftQuantity
			//page.totalNumber.totalScansQuanltity =totalScanQuanltity==null?0:totalScanQuanltity
			page.totalNumber.totalScansQuanltity = totalScanQuanltity + page.input.shiftQuantity

			page.input.unit = material.materialUnit
			//page.totalNumber.totalScansQuanltity=page.input.shiftQuantity

			page.maxNumber = page.input.shiftQuantity

			startPlay('successVoicePDA')

			//shiftQuantityFocus()

		}
		catch (err) {
			paging.value.complete(page.list.data)
			startPlay('errorVoicePDA')
			return
		} finally {
			if (page.handle.needConfirmQuantity) {
				fromBinFocus()
			}
			else {
				materialCodeFocus()
			}
			//materialCodeFocus()
			uni.hideLoading()
		}
	}

	//移出库位焦点
	function fromBinFocus() {
		const _fromBinCodeInput = unref(fromBinCodeInput)

		if (_fromBinCodeInput) {
			_fromBinCodeInput.toFocus()
		}
	}

	//移入库位焦点
	function toBinFocus() {
		const _toBinCodeInput = unref(toBinCodeInput)

		if (_toBinCodeInput) {
			_toBinCodeInput.toFocus()
		}
	}

	//物料条码焦点
	function materialCodeFocus() {
		const _materialCodeInput = unref(materialCodeInput)

		if (_materialCodeInput) {
			_materialCodeInput.toFocus()
		}
	}

	//数量焦点
	function shiftQuantityFocus() {
		const _shiftQuantityInput = unref(shiftQuantityInput)

		if (_shiftQuantityInput) {
			_shiftQuantityInput.toFocus()
		}
	}
</script>

<style lang="scss" scoped>
	.stockshift-detail {
		display: flex;

		.unit-item {
			width: 120rpx;
		}

		// .operate-item-checkbox {
		// 	display: flex;
		// 	flex-direction: row;
		// 	align-items: center;
		// 	//margin-left: 20rpx;

		// 	.unit-item {
		// 		width: 150rpx;
		// 	}
		// }

		.radio {
			left: 200rpx;
			//position: absolute;
			//bottom: 48rpx;
		}

		.radio-one {
			//top:40rpx;
			position: fixed;
			z-index: 3;
		}

		.sub-radio-text {
			left: 50rpx;
			bottom: 45rpx;
		}

		.stockshift-details-add-body__content {
			border-radius: 24rpx;
			flex: 1;
		}

		.sub-input-unit {
			padding-left: 50rpx;
			width: 20rpx;
		}

		.sub-check {
			margin-left: 100rpx;
		}
	}
</style>